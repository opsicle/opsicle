// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: coordinator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoordinatorService_GetNextJob_FullMethodName      = "/coordinator.CoordinatorService/GetNextJob"
	CoordinatorService_UpdateExecution_FullMethodName = "/coordinator.CoordinatorService/UpdateExecution"
)

// CoordinatorServiceClient is the client API for CoordinatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CoordinatorService exposes gRPC endpoints for worker-coordinator communication.
type CoordinatorServiceClient interface {
	// GetNextJob retrieves the next pending automation job from the queue.
	GetNextJob(ctx context.Context, in *GetNextJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetNextJobResponse], error)
	// UpdateExecution accepts execution status updates and logs from a worker.
	UpdateExecution(ctx context.Context, in *UpdateExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateExecutionResponse], error)
}

type coordinatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorServiceClient(cc grpc.ClientConnInterface) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) GetNextJob(ctx context.Context, in *GetNextJobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetNextJobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CoordinatorService_ServiceDesc.Streams[0], CoordinatorService_GetNextJob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetNextJobRequest, GetNextJobResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatorService_GetNextJobClient = grpc.ServerStreamingClient[GetNextJobResponse]

func (c *coordinatorServiceClient) UpdateExecution(ctx context.Context, in *UpdateExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateExecutionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CoordinatorService_ServiceDesc.Streams[1], CoordinatorService_UpdateExecution_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateExecutionRequest, UpdateExecutionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatorService_UpdateExecutionClient = grpc.ServerStreamingClient[UpdateExecutionResponse]

// CoordinatorServiceServer is the server API for CoordinatorService service.
// All implementations must embed UnimplementedCoordinatorServiceServer
// for forward compatibility.
//
// CoordinatorService exposes gRPC endpoints for worker-coordinator communication.
type CoordinatorServiceServer interface {
	// GetNextJob retrieves the next pending automation job from the queue.
	GetNextJob(*GetNextJobRequest, grpc.ServerStreamingServer[GetNextJobResponse]) error
	// UpdateExecution accepts execution status updates and logs from a worker.
	UpdateExecution(*UpdateExecutionRequest, grpc.ServerStreamingServer[UpdateExecutionResponse]) error
	mustEmbedUnimplementedCoordinatorServiceServer()
}

// UnimplementedCoordinatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorServiceServer struct{}

func (UnimplementedCoordinatorServiceServer) GetNextJob(*GetNextJobRequest, grpc.ServerStreamingServer[GetNextJobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetNextJob not implemented")
}
func (UnimplementedCoordinatorServiceServer) UpdateExecution(*UpdateExecutionRequest, grpc.ServerStreamingServer[UpdateExecutionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateExecution not implemented")
}
func (UnimplementedCoordinatorServiceServer) mustEmbedUnimplementedCoordinatorServiceServer() {}
func (UnimplementedCoordinatorServiceServer) testEmbeddedByValue()                            {}

// UnsafeCoordinatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServiceServer will
// result in compilation errors.
type UnsafeCoordinatorServiceServer interface {
	mustEmbedUnimplementedCoordinatorServiceServer()
}

func RegisterCoordinatorServiceServer(s grpc.ServiceRegistrar, srv CoordinatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoordinatorService_ServiceDesc, srv)
}

func _CoordinatorService_GetNextJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNextJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoordinatorServiceServer).GetNextJob(m, &grpc.GenericServerStream[GetNextJobRequest, GetNextJobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatorService_GetNextJobServer = grpc.ServerStreamingServer[GetNextJobResponse]

func _CoordinatorService_UpdateExecution_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoordinatorServiceServer).UpdateExecution(m, &grpc.GenericServerStream[UpdateExecutionRequest, UpdateExecutionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatorService_UpdateExecutionServer = grpc.ServerStreamingServer[UpdateExecutionResponse]

// CoordinatorService_ServiceDesc is the grpc.ServiceDesc for CoordinatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNextJob",
			Handler:       _CoordinatorService_GetNextJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateExecution",
			Handler:       _CoordinatorService_UpdateExecution_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coordinator.proto",
}
