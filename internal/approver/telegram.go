package approver

import (
	"context"
	"fmt"
	"opsicle/internal/common"
	"opsicle/internal/integrations/telegram"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/sirupsen/logrus"
)

var TelegramApprover *telegramApprover

type telegramApprover struct {
	Client      *telegram.Bot
	ChatMap     map[string]int64
	ServiceLogs chan<- common.ServiceLog
}

func (t *telegramApprover) Start(done chan common.Done) {
	go func() {
		<-done
		t.Client.Done <- common.Done{}
	}()
	logrus.Infof("started telegram client")
	t.Client.Start()
}

func (t *telegramApprover) SendApproval(req ApprovalRequest) error {
	text := fmt.Sprintf(
		"⚠️ Approval request\nID: `%s`\nMessage: `%s`\nRequester: %s \\(`%s`\\)",
		bot.EscapeMarkdown(req.Id),
		bot.EscapeMarkdown(req.Message),
		bot.EscapeMarkdown(req.RequesterName),
		bot.EscapeMarkdown(req.RequesterId),
	)

	approveBtn := &models.InlineKeyboardButton{
		Text:         "Approve",
		CallbackData: fmt.Sprintf("%s:%s", actionApprove, req.Id),
	}
	rejectBtn := &models.InlineKeyboardButton{
		Text:         "Reject",
		CallbackData: fmt.Sprintf("%s:%s", actionReject, req.Id),
	}

	markup := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{{*approveBtn, *rejectBtn}},
	}

	ctx := context.Background()
	t.ServiceLogs <- common.ServiceLogf(common.LogLevelInfo, "sending via telegram...")
	for _, target := range req.Telegram {
		t.ServiceLogs <- common.ServiceLogf(common.LogLevelDebug, "sending message to chat[%v]: %s", target.ChatId, text)
		_, err := t.Client.Client.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      target.ChatId,
			Text:        text,
			ParseMode:   "MarkdownV2",
			ReplyMarkup: markup,
		})
		if err != nil {
			t.ServiceLogs <- common.ServiceLogf(common.LogLevelError, "req[%v] failed to send message to chat[%v]: %s", req.Id, target.ChatId, err)
		}
	}
	return nil
}

type InitTelegramApproverOpts struct {
	// BotToken is a token generated by the @BotFather on
	// Telegram - get yours at https://t.me/BotFather
	BotToken string `json:"botToken" yaml:"botToken"`

	// ChatMap maps a logical chat name to it's ID in Telegram
	ChatMap map[string]int64 `json:"chatMap" yaml:"chatMap"`

	// ServiceLogs is the channel to send logs to for logging via
	// the centralised logger
	ServiceLogs chan<- common.ServiceLog
}

func InitTelegramApprover(opts InitTelegramApproverOpts) error {
	var err error
	telegramBot, err := telegram.New(telegram.NewOpts{
		BotToken:       opts.BotToken,
		DefaultHandler: getHandler(opts.ServiceLogs),
		ServiceLogs:    opts.ServiceLogs,
	})
	if err != nil {
		return fmt.Errorf("failed to create telegram bot: %s", err)
	}
	TelegramApprover = &telegramApprover{
		Client:      telegramBot,
		ChatMap:     opts.ChatMap,
		ServiceLogs: opts.ServiceLogs,
	}
	return nil
}

func getHandler(serviceLogs chan<- common.ServiceLog) func(context.Context, *telegram.Bot, *telegram.Update) {
	return func(ctx context.Context, b *telegram.Bot, update *telegram.Update) {
		serviceLogs <- common.ServiceLogf(common.LogLevelInfo, "chat[%v] << %s", update.ChatId, update.Message)
		data := update.CallbackData
		parts := strings.SplitN(data, ":", 2)
		if len(parts) != 2 {
			serviceLogs <- common.ServiceLogf(common.LogLevelError, "invalid callback data: %s", data)
			return
		}

		action := parts[0]
		requestId := parts[1]

		val, err := Cache.Get(approvalRequestCachePrefix + requestId)
		if err != nil {
			serviceLogs <- common.ServiceLogf(common.LogLevelError, "failed to fetch request from cache: %v", err)
			return
		}
		var response string
		if val == "" {
			response = "this request was not found"
		} else if val == "approved" {
			response = fmt.Sprintf("this request has already been approved")
		} else if val == "rejected" {
			response = fmt.Sprintf("this request has already been rejected")
		} else if action == actionApprove {
			if err := Cache.Set(approvalRequestCachePrefix+requestId, "approved", 0); err != nil {
				serviceLogs <- common.ServiceLogf(common.LogLevelError, "failed to set cache value: %v", err)
			}
			response = "this request has been approved"
		} else if action == actionReject {
			if err := Cache.Set(approvalRequestCachePrefix+requestId, "rejected", 0); err != nil {
				serviceLogs <- common.ServiceLogf(common.LogLevelError, "failed to set cache value: %v", err)
			}
			response = "this request has been rejected"
		}

		if err := b.SendMessage(update.ChatId, response); err != nil {
			serviceLogs <- common.ServiceLogf(common.LogLevelError, "failed to send confirmation message: %v", err)
		}
	}
}
