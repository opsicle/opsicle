package cli

import (
	"fmt"
	"opsicle/internal/common"
	"opsicle/pkg/controller"
)

type HandleTemplateUserSelectionOpts struct {
	// Client should be generated by the cosnuming function
	// and passed into this function for us
	Client *controller.Client

	// UserInput is what a user has input as the org code
	UserInput string

	// TemplateId is the ID of the template to retrieve users
	// from
	TemplateId string

	// ServiceLog is used for streaming logs
	ServiceLog chan<- common.ServiceLog
}

func HandleTemplateUserSelection(opts HandleTemplateUserSelectionOpts) (user *SelectedUser, err error) {
	var logs chan<- common.ServiceLog
	if opts.ServiceLog == nil {
		initNoopServiceLog()
		logs = noopServiceLog
		go startNoopServiceLog()
		defer stopNoopServiceLog()
	} else {
		logs = opts.ServiceLog
	}
	logs <- common.ServiceLogf(common.LogLevelDebug, fmt.Sprintf("retrieving available users from template[%s]", opts.TemplateId))

	templateUsers, err := opts.Client.ListTemplateUsersV1(controller.ListTemplateUsersV1Input{
		TemplateId: opts.TemplateId,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get template users: %w", err)
	}

	users := []handleUserSelectionOptsUser{}
	userEmailMap := map[string]string{}
	for _, templateUser := range templateUsers.Data.Users {
		userEmailMap[templateUser.Id] = templateUser.Email
		users = append(users, handleUserSelectionOptsUser{
			Id:    templateUser.Id,
			Email: templateUser.Email,
		})
	}
	selectedUser, err := handleUserSelection(handleUserSelectionOpts{
		Client:     opts.Client,
		UserInput:  opts.UserInput,
		Users:      users,
		ServiceLog: logs,
	})
	if err != nil {
		return nil, err
	}
	return selectedUser, nil
}
