package cli

import (
	"fmt"
	"opsicle/internal/common"
	"opsicle/pkg/controller"

	"github.com/spf13/viper"
)

type HandleOrgUserSelectionOpts struct {
	// Client should be generated by the cosnuming function
	// and passed into this function for us
	Client *controller.Client

	// OrgId is the ID of the organisation to get users from
	OrgId string

	// UserInput is what a user has input as the org code
	UserInput string

	// ServiceLog is used for streaming logs
	ServiceLog chan<- common.ServiceLog
}

func HandleOrgUserSelection(opts HandleOrgUserSelectionOpts) (orgUser *SelectedUser, err error) {
	var logs chan<- common.ServiceLog
	if opts.ServiceLog == nil {
		initNoopServiceLog()
		logs = noopServiceLog
		go startNoopServiceLog()
		defer stopNoopServiceLog()
	} else {
		logs = opts.ServiceLog
	}
	logs <- common.ServiceLogf(common.LogLevelDebug, "retrieving available users in the current org")
	orgUsers, err := opts.Client.ListOrgUsersV1(controller.ListOrgUsersV1Input{OrgId: opts.OrgId})
	if err != nil {
		return nil, fmt.Errorf("org users retrieval failed: %w", err)
	}

	userSelections := make([]handleUserSelectionOptsUser, 0, len(orgUsers.Data))
	userIdEmailMap := make(map[string]string, len(orgUsers.Data))
	for _, orgUser := range orgUsers.Data {
		userSelections = append(userSelections, handleUserSelectionOptsUser{
			Id:    orgUser.UserId,
			Email: orgUser.UserEmail,
		})
		userIdEmailMap[orgUser.UserId] = orgUser.UserEmail
	}

	selectedUser, err := handleUserSelection(handleUserSelectionOpts{
		Client:    opts.Client,
		UserInput: viper.GetString("user"),
		Users:     userSelections,
	})
	if err != nil {
		return nil, fmt.Errorf("user selection failed: %w", err)
	} else if selectedUser == nil {
		return nil, fmt.Errorf("user selection returned nil user identifier")
	}
	return selectedUser, nil
}
